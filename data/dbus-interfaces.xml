<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<!--
 Copyright (C) 2011 Red Hat, Inc.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA 02111-1307, USA.

 Author: David Zeuthen <davidz@redhat.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!-- ********************************************************************** -->

  <!--
      org.gnome.OnlineAccounts.Account:

      The base account interface.
  -->
  <interface name="org.gnome.OnlineAccounts.Account">
    <!-- ProviderType: The provider of the account.
         Known values include
         <variablelist>
         <varlistentry><term>google</term><listitem><para>The account is a Google Account. See the #org.gnome.OnlineAccounts.GoogleAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>facebook</term><listitem><para>The account is a Facebook Account. See the #org.gnome.OnlineAccounts.FacebookAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>yahoo</term><listitem><para>The account is a Yahoo Account. See the #org.gnome.OnlineAccounts.YahooAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>twitter</term><listitem><para>The account is a Twitter Account. See the #org.gnome.OnlineAccounts.TwitterAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>generic_mail</term><listitem><para>The account is a Mail Account for Internet-based mail. See the #org.gnome.OnlineAccounts.Mail D-Bus interface for more details.</para></listitem></varlistentry>
         </variablelist>
    -->
    <property name="ProviderType" type="s" access="read"/>

    <!-- Id: An identifier for this account.
         This identifier cannot be changed and should never be
         displayed in any user interface.
      -->
    <property name="Id" type="s" access="read"/>

    <!-- KeyfilePath: The path to the keyfile where the account is defined. -->
    <property name="KeyfilePath" type="ay" access="read"/>

    <!-- KeyfileGroup: The group name in #org.gnome.OnlineAccounts.Account:KeyfilePath for the account. -->
    <property name="KeyfileGroup" type="s" access="read"/>

    <!-- AttentionNeeded: Set to %TRUE if the account is in need of attention.

         This is used when a human operator is needed to service the
         account (e.g. for authentication and/or authorization).
      -->
    <property name="AttentionNeeded" type="b" access="read"/>

    <!-- Name: A human-readable description for the account.

         This property may change if the user e.g. renames the
         account.
      -->
    <property name="Name" type="s" access="read"/>

    <!--
        Remove:

        Removes the account. Note that this does not removes the
        account at the remote service.
    -->
    <method name="Remove"/>

    <!--
        EnsureCredentials:
        @expires_in: The duration that the cached credentials are valid for, in seconds, or 0 if unknown.

        Ensures that valid credentials exist for the account and
        returns how long they are still valid for, if known. Returns
        an error if the cached credentials are not valid or
        non-existant.

        If this method fails because the token service indicates that
        authorization has expired, the
        #org.gnome.OnlineAccounts.Account:AttentionNeeded property
        will be set to %TRUE. On the other hand, if this property was
        already %TRUE and this method succeeds, it is set to %FALSE.
    -->
    <method name="EnsureCredentials">
      <arg name="expires_in" type="i" direction="out"/>
    </method>

  </interface>

  <!--
      org.gnome.OnlineAccounts.GoogleAccount:

      A Google Account, either a <emphasis>hosted</emphasis> account
      (for example <email>user&#64;mycollege.edu</email>) or a regular
      account (for example <email>user&#64;gmail.com</email>).

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuthBased interfaces.

      The object may implement #org.gnome.OnlineAccounts.Mail (if mail is enabled).

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> and
      <literal>MailEnabled</literal> elements in the @details
      parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.GoogleAccount">
    <!-- EmailAddress: The email address identifying the account.

         This value cannot be changed once set.
      -->
    <property name="EmailAddress" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.FacebookAccount:

      A Facebook Account.

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuth2Based interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in the
      @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.FacebookAccount">
    <!-- UserName: The user name identifying the account.

         This value cannot be changed once set.
      -->
    <property name="UserName" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.YahooAccount:

      A Yahoo Account.

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuthBased interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in the
      @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.YahooAccount">
    <!-- GUID: The guid identifying the account.

         This value cannot be changed once set.
      -->
    <property name="GUID" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.TwitterAccount:

      A Twitter Account.

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuthBased interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in the
      @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.TwitterAccount">
    <!-- Id: The user id identifying the account.

         This value cannot be changed once set.
      -->
    <property name="Id" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.OAuth2Based:

      An account object implements this interface if <ulink
      url="http://oauth.net/2/">OAuth 2.0</ulink> tokens are used for
      accessing it.
  -->
  <interface name="org.gnome.OnlineAccounts.OAuth2Based">
    <!--
      GetAccessToken:
      @access_token: The access token.
      @expires_in: The duration that the returned token is valid for, in seconds, or 0 if unknown.

      Use this method to obtain an access token that can be used to
      access services for the account. Because networking is involved,
      this method may take a very long time to complete.

      Note that calls to this method are logged.
    -->
    <method name="GetAccessToken">
      <arg name="access_token" type="s" direction="out"/>
      <arg name="expires_in" type="i" direction="out"/>
    </method>

    <!-- Identity: The identity that was authenticated. -->
    <property name="Identity" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.OAuthBased:

      An account object implements this interface if <ulink
      url="http://oauth.net">OAuth 1.0</ulink> tokens are used for
      accessing it.
  -->
  <interface name="org.gnome.OnlineAccounts.OAuthBased">
    <!--
      GetAccessToken:
      @access_token: The access token.
      @access_token_secret: The access token secret.
      @expires_in: The duration that the returned token is valid for, in seconds, or 0 if unknown.

      Use this method to obtain an access token that can be used to to
      access services for the account. Because networking is involved,
      this method may take a very long time to complete.

      Note that calls to this method are logged.
    -->
    <method name="GetAccessToken">
      <arg name="access_token" type="s" direction="out"/>
      <arg name="access_token_secret" type="s" direction="out"/>
      <arg name="expires_in" type="i" direction="out"/>
    </method>

    <!-- ConsumerKey: The consumer key. -->
    <property name="ConsumerKey" type="s" access="read"/>

    <!-- ConsumerSecret: The consumer secret. -->
    <property name="ConsumerSecret" type="s" access="read"/>

    <!-- Identity: The identity that was authenticated. -->
    <property name="Identity" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.PasswordBased:

      An account object implements this interface if one or more
      passwords are used for accessing it.
  -->
  <interface name="org.gnome.OnlineAccounts.PasswordBased">
    <!--
      GetPassword:
      @id: An identifier describing what password to get.
      @password: The password.

      Use this method to obtain the passwords used to access the
      account.

      If the account is for a mail account (see
      #org.gnome.OnlineAccounts.Mail), known values for @id includes
      <literal>imap-password</literal> and
      <literal>smtp-password</literal>.

      Note that calls to this method are logged.
    -->
    <method name="GetPassword">
      <arg name="id" type="s" direction="in"/>
      <arg name="password" type="s" direction="out"/>
    </method>
  </interface>

  <!--
      org.gnome.OnlineAccounts.Manager:

      An interface used for managing accounts.
  -->
  <interface name="org.gnome.OnlineAccounts.Manager">

    <!--
        AddAccount:
        @type: The type of account to create. See the #org.gnome.OnlineAccounts:Type property for known types.
        @name: The human readable name of the account (cf. the #org.gnome.OnlineAccounts.Account:Name property).
        @details: Details about the account. See each interface (e.g. #org.gnome.OnlineAccounts.GoogleAccount) for details of what other elements to include.
        @account_object_path: The object path of the created account.

        Creates a new account. Note that this does not create an
        account at the remote service.
    -->
    <method name="AddAccount">
      <arg name="type" type="s" direction="in"/>
      <arg name="name" type="s" direction="in"/>
      <arg name="details" type="a{ss}" direction="in"/>
      <arg name="account_object_path" type="o" direction="out"/>
    </method>

  </interface>


  <!--
      org.gnome.OnlineAccounts.Mail:

      An account object implements this interface if it provides
      email-like messaging capabilities.
  -->
  <interface name="org.gnome.OnlineAccounts.Mail">
    <!--
      CreateMonitor:
      @monitor_object: Object path of the resulting monitor object.

      Creates a new #org.gnome.OnlineAccounts.Mail.Monitor object for
      listening to incoming mail messages. The returned object will
      stay alive until its
      org.gnome.OnlineAccounts.Mail.Monitor.Close() is called or the
      caller vanishes from the message bus.
    -->
    <method name="CreateMonitor">
      <arg name="monitor_object" type="o" direction="out"/>
    </method>

    <!-- EmailAddress:
         The email address for the account or blank if there is no
         such address or if it isnt' known or isn't in a standard
         format.
      -->
    <property name="EmailAddress" type="s" access="read"/>

    <!-- ImapSupported:
         Set to %TRUE if the messages for the account can be accessed
         and manipulated using the
         <ulink url="http://tools.ietf.org/html/rfc3501">IMAP</ulink>
         protocol.
      -->
    <property name="ImapSupported" type="b" access="read"/>

    <!-- ImapHost:
         The IMAP server to use.

         This may be in any of a number of recognized formats; an IPv6
         address, an IPv4 address, or a domain name. A port override
         may be specified in the usual way with a colon. Ports may be
         given as decimal numbers or symbolic names
         (cf. the <filename>/etc/services</filename> file).

         If a port override is not given, then applications should try
         to connect to port 993 if
         #org.gnome.OnlineAccounts.Mail:ImapUseTls is %TRUE and port
         143 if not.
    -->
    <property name="ImapHost" type="s" access="read"/>

    <!-- ImapUseTls: Whether TLS should be used to establish the connection. -->
    <property name="ImapUseTls" type="b" access="read"/>

    <!-- ImapUserName:
         The user name to use for logging in.

         This may be blank if username/password authentication isn't
         used or if the user name of the current user should be used.
    -->
    <property name="ImapUserName" type="s" access="read"/>

    <!-- SmtpSupported:
         Set to %TRUE if the
         <ulink url="http://tools.ietf.org/html/rfc5321">SMTP</ulink>
         protocol can be used to send messages for the account.
      -->
    <property name="SmtpSupported" type="b" access="read"/>

    <!-- SmtpHost:
         The SMTP server to use.

         This may be in any of a number of recognized formats; an IPv6
         address, an IPv4 address, or a domain name. A port override
         may be specified in the usual way with a colon. Ports may be
         given as decimal numbers or symbolic names
         (cf. the <filename>/etc/services</filename> file).

         If a port override is not given, then applications should try
         to connect to port 465 if
         #org.gnome.OnlineAccounts.Mail:SmtpUseTls is %TRUE and port
         587 (or 25) if not.
    -->
    <property name="SmtpHost" type="s" access="read"/>

    <!-- SmtpUseTls: Whether TLS should be used to establish the connection. -->
    <property name="SmtpUseTls" type="b" access="read"/>

    <!-- SmtpUserName:
         The user name to use for logging in.

         This may be blank if username/password authentication isn't
         used or if the user name of the current user should be used.
    -->
    <property name="SmtpUserName" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.Mail.Monitor:

      An interface used for monitoring for incoming messages. Use the
      org.gnome.OnlineAccounts.Mail.CreateMonitor() method on the
      #org.gnome.OnlineAccounts.Mail interface to create an object
      with this interface.
  -->
  <interface name="org.gnome.OnlineAccounts.Mail.Monitor">

    <!-- Connected:
         %TRUE if currently connected to the server, %FALSE if not.

         If %FALSE, a client should periodically call the
         org.gnome.OnlineAccounts.Mail.Monitor.Refresh() method when
         network connectivity is available.
    -->
    <property name="Connected" type="b" access="read"/>

    <!-- Refresh:
         Forcibly does a server roundtrip to check for new messages.

         Normally this isn't needed as implementations typically uses
         techniques such as <ulink
         url="http://en.wikipedia.org/wiki/IMAP_IDLE">IMAP
         IDLE</ulink> to keep the current.

         As a side-effect, this also updates the
         #org.gnome.OnlineAccounts.Mail.Monitor:Connected property -
         specifically this property might bet se to %FALSE (in case
         network connectivity was lost) or %TRUE (in case network
         connectivity was acquired).

         This method won't return until the check is done so it is
         appropriate to e.g. show a spinner while the operation is
         pending.
    -->
    <method name="Refresh"/>

    <!-- Close:
         Method that can be used to close the monitor and release all
         resources used for it.
    -->
    <method name="Close"/>

    <!-- MessageReceived:
         @uid: Unique ID of the message.
         @from: Name of sender.
         @subject: The subject of the message.
         @excerpt: Plain-text excerpt of the message.
         @uri: An URI that can be used to open the message or blank if no such URI exists.
         @can_be_marked_as_spam: %TRUE if the message can be marked as Spam.
         @can_be_starred: %TRUE if the message can be Starred.

         Signal emitted when a new message is received.

         TODO: When gnome-shell can handle GVariant instances then add extras back and fold can_be* stuff into it: @extras: Other information about the message (currently unused).
    -->
    <signal name="MessageReceived">
      <arg name="uid" type="s"/>
      <arg name="from" type="s"/>
      <arg name="subject" type="s"/>
      <arg name="excerpt" type="s"/>
      <arg name="uri" type="s"/>
      <arg name="can_be_marked_as_spam" type="b"/>
      <arg name="can_be_starred" type="b"/>
      <!-- arg name="extras" type="a{sv}"/ -->
    </signal>

    <!-- AddStar:
         @uid: Unique ID of message.

         Adds a star to a message. The @uid parameter should be
         obtained from a
         #org.gnome.OnlineAccounts.Mail.Monitor::MessageReceived
         signal where the @can_be_starred parameter was %TRUE.
    -->
    <method name="AddStar">
      <arg name="uid" type="s" direction="in"/>
    </method>

    <!-- MarkAsSpam:
         @uid: Unique ID of message.

         Marks a message as spam. The @uid parameter should be
         obtained from a
         #org.gnome.OnlineAccounts.Mail.Monitor::MessageReceived
         signal where the @can_be_starred parameter was %TRUE.
    -->
    <method name="MarkAsSpam">
      <arg name="uid" type="s" direction="in"/>
    </method>

    <method name="SimulateMessageReceived">
      <arg name="uid" type="s" direction="in"/>
      <arg name="from" type="s" direction="in"/>
      <arg name="subject" type="s" direction="in"/>
      <arg name="excerpt" type="s" direction="in"/>
      <arg name="uri" type="s" direction="in"/>
      <arg name="can_be_marked_as_spam" type="b" direction="in"/>
      <arg name="can_be_starred" type="b" direction="in"/>
      <!-- arg name="extras" type="a{sv}"/ -->
    </method>
  </interface>

</node>
