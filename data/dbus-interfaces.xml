<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<!--
 Copyright (C) 2011 Red Hat, Inc.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA 02111-1307, USA.

 Author: David Zeuthen <davidz@redhat.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!-- ********************************************************************** -->

  <!--
      org.gnome.OnlineAccounts.Account:

      The base account interface.
  -->
  <interface name="org.gnome.OnlineAccounts.Account">
    <!-- Type: The type of the account.
         Known values include
         <variablelist>
         <varlistentry><term>google</term><listitem><para>The account is a Google Account. See the #org.gnome.OnlineAccounts.GoogleAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>facebook</term><listitem><para>The account is a Facebook Account. See the #org.gnome.OnlineAccounts.FacebookAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>yahoo</term><listitem><para>The account is a Yahoo Account. See the #org.gnome.OnlineAccounts.YahooAccount D-Bus interface for more details.</para></listitem></varlistentry>
         <varlistentry><term>twitter</term><listitem><para>The account is a Twitter Account. See the #org.gnome.OnlineAccounts.TwitterAccount D-Bus interface for more details.</para></listitem></varlistentry>
         </variablelist>
    -->
    <property name="Type" type="s" access="read">
      <!-- Avoid getting renamed to type_ because we clash with the GType get_type() function -->
      <annotation name="org.gtk.GDBus.C.Name" value="AccountType"/>
    </property>

    <!-- Id: An identifier for this account.
         This identifier cannot be changed and should never be
         displayed in any user interface.
      -->
    <property name="Id" type="s" access="read"/>

    <!-- AttentionNeeded: Set to TRUE if the account is in need of attention.

         This is used when a human operator is needed to service the
         account (e.g. for authentication and/or authorization).
      -->
    <property name="AttentionNeeded" type="b" access="read"/>

    <!-- Name: A human-readable description for the account.

         This property may change if the user e.g. renames the
         account.
      -->
    <property name="Name" type="s" access="read"/>

    <!-- SetName: Sets the name. -->
    <method name="SetName">
      <arg name="name" type="s" direction="in"/>
    </method>

    <!-- ClearAttentionNeeded: Clears the #org.gnome.OnlineAccounts.Account:AttentionNeeded property -->
    <method name="ClearAttentionNeeded"/>

    <!--
        Remove:

        Removes the account. Note that this does not removes the
        account at the remote service.
    -->
    <method name="Remove"/>

    <!--
        EnsureCredentials:
        @expires_in: The duration that the cached credentials are valid for, in seconds or 0 if unknown.

        Ensures that valid credentials exist for the account and
        returns how long they are still valid for, if known.

        Returns an error if the cached credentials are not valid. TODO: specify what errors can be returned.
    -->
    <method name="EnsureCredentials">
      <arg name="expires_in" type="i" direction="out"/>
    </method>

  </interface>

  <!--
      org.gnome.OnlineAccounts.GoogleAccount:

      A Google Account, either a <emphasis>hosted</emphasis> account
      (for example <email>user@mycollege.edu</email>) or a regular
      account (for example <email>user@gmail.com</email>).

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuthBased interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in
      the @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.GoogleAccount">
    <!-- EmailAddress: The email address identifying the account.

         This value cannot be changed once set.
      -->
    <property name="EmailAddress" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.FacebookAccount:

      A Facebook Account.

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuth2Based interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in
      the @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.FacebookAccount">
    <!-- UserName: The user name identifying the account.

         This value cannot be changed once set.
      -->
    <property name="UserName" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.YahooAccount:

      A Yahoo Account.

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuthBased interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in
      the @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.YahooAccount">
    <!-- GUID: The guid identifying the account.

         This value cannot be changed once set.
      -->
    <property name="GUID" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.TwitterAccount:

      A Twitter Account.

      Objects implementing this interface also implement the
      #org.gnome.OnlineAccounts.Account and
      #org.gnome.OnlineAccounts.OAuthBased interfaces.

      When creating this kind of account via the
      org.gnome.OnlineAccounts.Manager.AddAccount() method, you need
      to include an <literal>Identity</literal> element in
      the @details parameter.
  -->
  <interface name="org.gnome.OnlineAccounts.TwitterAccount">
    <!-- Id: The user id identifying the account.

         This value cannot be changed once set.
      -->
    <property name="Id" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.OAuth2Based:

      An account object implements this interface if <ulink
      url="http://oauth.net/2/">OAuth 2.0</ulink> is used to control
      access.
  -->
  <interface name="org.gnome.OnlineAccounts.OAuth2Based">
    <!--
      GetAccessToken:
      @access_token: The access token.
      @expires_in: The duration that the returned token is valid for, in seconds or 0 if unknown.

      Use this method to obtains an access token to access services
      for an account. Because networking is involved, this method may
      take a very long time to complete.

      If this method fails because the token service indicates that
      authorization has expired, the
      #org.gnome.OnlineAccounts.Account:AttentionNeeded property will
      be set to TRUE.
    -->
    <method name="GetAccessToken">
      <arg name="access_token" type="s" direction="out"/>
      <arg name="expires_in" type="i" direction="out"/>
    </method>

    <!-- Identity: The identity that was authenticated. -->
    <property name="Identity" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.OAuthBased:

      An account object implements this interface if <ulink
      url="http://oauth.net">OAuth 1.0</ulink> is used to control
      access.
  -->
  <interface name="org.gnome.OnlineAccounts.OAuthBased">
    <!--
      GetAccessToken:
      @access_token: The access token.
      @access_token_secret: The access token secret.
      @expires_in: The duration that the returned token is valid for, in seconds or 0 if unknown.

      Use this method to obtains an access token to access services
      for an account. Because networking is involved, this method may
      take a very long time to complete.

      If this method fails because the token service indicates that
      authorization has expired, the
      #org.gnome.OnlineAccounts.Account:AttentionNeeded property will
      be set to TRUE.
    -->
    <method name="GetAccessToken">
      <arg name="access_token" type="s" direction="out"/>
      <arg name="access_token_secret" type="s" direction="out"/>
      <arg name="expires_in" type="i" direction="out"/>
    </method>

    <!-- Identity: The identity that was authenticated. -->
    <property name="Identity" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.Manager:

      An interface used for managing accounts.
  -->
  <interface name="org.gnome.OnlineAccounts.Manager">

    <!--
        AddAccount:
        @type: The type of account to create. See the #org.gnome.OnlineAccounts:Type property for known types.
        @name: The human readable name of the account (cf. the #org.gnome.OnlineAccounts:Name property).
        @details: Details about the account. See each interface
        (e.g. #org.gnome.OnlineAccounts.GoogleAccount) for details of
        what other elements to include.
        @account_object_path: The object path of the created account.

        Creates a new account. Note that this does not create an
        account at the remote service.
    -->
    <method name="AddAccount">
      <arg name="type" type="s" direction="in"/>
      <arg name="name" type="s" direction="in"/>
      <arg name="details" type="a{ss}" direction="in"/>
      <arg name="account_object_path" type="o" direction="out"/>
    </method>

  </interface>

</node>
