<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<!--
 Copyright (C) 2011 Red Hat, Inc.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA 02111-1307, USA.

 Author: David Zeuthen <davidz@redhat.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!-- ********************************************************************** -->

  <!--
      org.gnome.OnlineAccounts.Account:

      The base account interface.
  -->
  <interface name="org.gnome.OnlineAccounts.Account">
    <!-- ProviderType: The provider of the account.
         Known values include
         <variablelist>
         <varlistentry><term>google</term><listitem><para>The account is a Google Account.</para></listitem></varlistentry>
         <varlistentry><term>facebook</term><listitem><para>The account is a Facebook Account.</para></listitem></varlistentry>
         <varlistentry><term>yahoo</term><listitem><para>The account is a Yahoo Account.</para></listitem></varlistentry>
         <varlistentry><term>twitter</term><listitem><para>The account is a Twitter Account.</para></listitem></varlistentry>
         </variablelist>
    -->
    <property name="ProviderType" type="s" access="read"/>

    <!-- Id: An identifier for this account.
         This identifier cannot be changed and should never be
         displayed in any user interface.
      -->
    <property name="Id" type="s" access="read"/>

    <!-- AttentionNeeded: Set to %TRUE if the account is in need of attention.

         This is used when a human operator is needed to service the
         account (e.g. for authentication and/or authorization).
      -->
    <property name="AttentionNeeded" type="b" access="read"/>

    <!-- Identity:
         A string that uniquely identifies the account at the
         provider.

         Note that this may be the same string for different kinds of
         providers (for example, if the user is using the same
         email-address for several providers) - use
         #org.gnome.OnlineAccounts.Account:Id to uniquely identify the
         account.

         This string might not be suitable for presentation in an user
         interface - use
         #org.gnome.OnlineAccounts.Account:PresentationIdentity instead.
    -->
    <property name="Identity" type="s" access="read"/>

    <!-- PresentationIdentity:
         Like the #org.gnome.OnlineAccounts.Account:Identity property but
         suitable for presentation in an user interface.
    -->
    <property name="PresentationIdentity" type="s" access="read"/>

    <!--
        Remove:

        Removes the account. Note that this does not removes the
        account at the remote service.
    -->
    <method name="Remove"/>

    <!--
        EnsureCredentials:
        @expires_in: The duration that the cached credentials are valid for, in seconds, or 0 if unknown.

        Ensures that valid credentials exist for the account and
        returns how long they are still valid for, if known. Returns
        an error if the cached credentials are not valid or
        non-existant.

        If this method fails because the token service indicates that
        authorization has expired, the
        #org.gnome.OnlineAccounts.Account:AttentionNeeded property
        will be set to %TRUE. On the other hand, if this property was
        already %TRUE and this method succeeds, it is set to %FALSE.
    -->
    <method name="EnsureCredentials">
      <arg name="expires_in" type="i" direction="out"/>
    </method>

  </interface>

  <!--
      org.gnome.OnlineAccounts.OAuth2Based:

      An account object implements this interface if <ulink
      url="http://oauth.net/2/">OAuth 2.0</ulink> tokens are used for
      accessing it.
  -->
  <interface name="org.gnome.OnlineAccounts.OAuth2Based">
    <!--
      GetAccessToken:
      @access_token: The access token.
      @expires_in: The duration that the returned token is valid for, in seconds, or 0 if unknown.

      Use this method to obtain an access token that can be used to
      access services for the account. Because networking is involved,
      this method may take a very long time to complete.

      Note that calls to this method are logged.
    -->
    <method name="GetAccessToken">
      <arg name="access_token" type="s" direction="out"/>
      <arg name="expires_in" type="i" direction="out"/>
    </method>
  </interface>

  <!--
      org.gnome.OnlineAccounts.OAuthBased:

      An account object implements this interface if <ulink
      url="http://oauth.net">OAuth 1.0</ulink> tokens are used for
      accessing it.
  -->
  <interface name="org.gnome.OnlineAccounts.OAuthBased">
    <!--
      GetAccessToken:
      @access_token: The access token.
      @access_token_secret: The access token secret.
      @expires_in: The duration that the returned token is valid for, in seconds, or 0 if unknown.

      Use this method to obtain an access token that can be used to to
      access services for the account. Because networking is involved,
      this method may take a very long time to complete.

      Note that calls to this method are logged.
    -->
    <method name="GetAccessToken">
      <arg name="access_token" type="s" direction="out"/>
      <arg name="access_token_secret" type="s" direction="out"/>
      <arg name="expires_in" type="i" direction="out"/>
    </method>

    <!-- ConsumerKey: The consumer key. -->
    <property name="ConsumerKey" type="s" access="read"/>

    <!-- ConsumerSecret: The consumer secret. -->
    <property name="ConsumerSecret" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.PasswordBased:

      An account object implements this interface if one or more
      passwords are used for accessing it.
  -->
  <interface name="org.gnome.OnlineAccounts.PasswordBased">
    <!--
      GetPassword:
      @id: An identifier describing what password to get.
      @password: The password.

      Use this method to obtain the passwords used to access the
      account.

      If the account is for a mail account (see
      #org.gnome.OnlineAccounts.Mail), known values for @id includes
      <literal>imap-password</literal> and
      <literal>smtp-password</literal>.

      Note that calls to this method are logged.
    -->
    <method name="GetPassword">
      <arg name="id" type="s" direction="in"/>
      <arg name="password" type="s" direction="out"/>
    </method>
  </interface>

  <!--
      org.gnome.OnlineAccounts.Manager:

      An interface used for managing accounts.
  -->
  <interface name="org.gnome.OnlineAccounts.Manager">

    <!--
        AddAccount:
        @provider: The account provider. See the #org.gnome.OnlineAccounts.Account:ProviderType property for known providers.
        @identity: The identity of the account (cf. the #org.gnome.OnlineAccounts.Account:Identity property).
        @presentation_identity: The identity of the account that is suitable for display in an user interface (cf. the #org.gnome.OnlineAccounts.Account:PresentationIdentity property).
        @details: Extra key/value pairs to set.
        @account_object_path: The object path of the created account.

        Creates a new account. Note that this does not create an
        account at the remote service.
    -->
    <method name="AddAccount">
      <arg name="provider" type="s" direction="in"/>
      <arg name="identity" type="s" direction="in"/>
      <arg name="presentation_identity" type="s" direction="in"/>
      <arg name="details" type="a{ss}" direction="in"/>
      <arg name="account_object_path" type="o" direction="out"/>
    </method>

  </interface>


  <!--
      org.gnome.OnlineAccounts.Mail:

      An account object implements this interface if it provides
      email-like messaging capabilities.
  -->
  <interface name="org.gnome.OnlineAccounts.Mail">
    <!-- EmailAddress:
         The email address for the account or blank if there is no
         such address or if it isnt' known or isn't in a standard
         format.
      -->
    <property name="EmailAddress" type="s" access="read"/>

    <!-- ImapSupported:
         Set to %TRUE if the messages for the account can be accessed
         and manipulated using the
         <ulink url="http://tools.ietf.org/html/rfc3501">IMAP</ulink>
         protocol.
      -->
    <property name="ImapSupported" type="b" access="read"/>

    <!-- ImapHost:
         The IMAP server to use.

         This may be in any of a number of recognized formats; an IPv6
         address, an IPv4 address, or a domain name. A port override
         may be specified in the usual way with a colon. Ports may be
         given as decimal numbers or symbolic names
         (cf. the <filename>/etc/services</filename> file).

         If a port override is not given, then applications should try
         to connect to port 993 if
         #org.gnome.OnlineAccounts.Mail:ImapUseTls is %TRUE and port
         143 if not.
    -->
    <property name="ImapHost" type="s" access="read"/>

    <!-- ImapUseTls: Whether TLS should be used to establish the connection. -->
    <property name="ImapUseTls" type="b" access="read"/>

    <!-- ImapUserName:
         The user name to use for logging in.

         This may be blank if username/password authentication isn't
         used or if the user name of the current user should be used.
    -->
    <property name="ImapUserName" type="s" access="read"/>

    <!-- SmtpSupported:
         Set to %TRUE if the
         <ulink url="http://tools.ietf.org/html/rfc5321">SMTP</ulink>
         protocol can be used to send messages for the account.
      -->
    <property name="SmtpSupported" type="b" access="read"/>

    <!-- SmtpHost:
         The SMTP server to use.

         This may be in any of a number of recognized formats; an IPv6
         address, an IPv4 address, or a domain name. A port override
         may be specified in the usual way with a colon. Ports may be
         given as decimal numbers or symbolic names
         (cf. the <filename>/etc/services</filename> file).

         If a port override is not given, then applications should try
         to connect to port 465 if
         #org.gnome.OnlineAccounts.Mail:SmtpUseTls is %TRUE and port
         587 (or 25) if not.
    -->
    <property name="SmtpHost" type="s" access="read"/>

    <!-- SmtpUseTls: Whether TLS should be used to establish the connection. -->
    <property name="SmtpUseTls" type="b" access="read"/>

    <!-- SmtpUserName:
         The user name to use for logging in.

         This may be blank if username/password authentication isn't
         used or if the user name of the current user should be used.
    -->
    <property name="SmtpUserName" type="s" access="read"/>
  </interface>

  <!--
      org.gnome.OnlineAccounts.Calendar:

      An account object implements this interface if it provides
      calendar-like capabilities.
  -->
  <interface name="org.gnome.OnlineAccounts.Calendar">
  </interface>

  <!--
      org.gnome.OnlineAccounts.Contacts:

      An account object implements this interface if it provides
      contacts-like capabilities.
  -->
  <interface name="org.gnome.OnlineAccounts.Contacts">
  </interface>

</node>
